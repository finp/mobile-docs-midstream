<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Getting Started with Mobile Developer Services</title>
<date>2019-08-12</date>
</info>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>Red Hat Mobile Developer Services provides solutions to common development challenges faced by mobile developers.
With OpenShift&#8217;s Container technology providing a secure, scalable backend platform, mobile developers can use the Red Hat SDK which supports a range of native (iOS &amp; Android) and hybrid (Xamarin &amp; Cordova) platforms to create secure, high quality apps and makes it easy to add features such as Push Notifications or Authentication.</simpara>
<simpara>Mobile Apps in OpenShift allow you to perform Cloud Native Mobile App Development using OpenShift as the back-end for your mobile apps. A Mobile App is a representation of the mobile app that you are developing locally. Mobile Apps allow you to bind your mobile app to mobile services such as Identity Management, Push Notifications, Mobile Metrics and others. This makes many of the common tasks associated with mobile development much easier and quicker to implement.</simpara>
<simpara>A configuration file named <literal>mobile-services.json</literal> acts as the link between your Mobile App in OpenShift and your local app in development. This configuration file is used to initialize the AeroGear SDK in your mobile app and to connect to the back-end Mobile Developer Services you have provisioned on OpenShift.</simpara>
<simpara>Mobile Developer Console is part of Red Hat Mobile Developer Services and allows you to:</simpara>
<itemizedlist>
<listitem>
<simpara>create a representation of your mobile application in OpenShift</simpara>
</listitem>
<listitem>
<simpara>bind Mobile App with mobile services</simpara>
</listitem>
<listitem>
<simpara>get the <literal>mobile-services.json</literal> configuration file for use in your local development environment</simpara>
</listitem>
</itemizedlist>
<important>
<simpara>Red Hat Mobile Developer Services is currently in a development phase. This makes it unsuitable for production deployment. Use this community release as an evaluation environment for developing and deploying mobile applications on Openshift.</simpara>
</important>
<simpara>This guide shows you how to:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="getting-started-installing.xml">Set up Red Hat Mobile Developer Services on OpenShift</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="getting-started-configuring.xml">Create a Mobile App and a Mobile Service</link> (Identity Management)</simpara>
</listitem>
<listitem>
<simpara><link xl:href="getting-started-running.xml">Set up a local development environment</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="getting-started-running.xml#running">Configure the Red Hat showcase app for your mobile platform</link> (Android, iOS, Cordova or Xamarin)</simpara>
</listitem>
<listitem>
<simpara><link xl:href="getting-started-running.xml#running-emulator">Run the showcase app and make calls to the Identity Management service</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_configuring_your_mobile_app_and_mobile_service_in_openshift">
<title>Configuring your Mobile App and Mobile Service in OpenShift</title>

</section>
<section xml:id="registering">
<title>Registering a Mobile App</title>
<simpara>After provisioning Mobile Developer Console, the next step is to register the Mobile App that you are going to develop.</simpara>
<formalpara>
<title>Procedure</title>
<para>To create a Mobile App:</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Log into the OpenShift console.</simpara>
</listitem>
<listitem>
<simpara>Choose project where you have previously deployed Mobile Developer Console.</simpara>
</listitem>
<listitem>
<simpara>Open Mobile Developer Console by clicking on its route in the <emphasis role="strong">Overview</emphasis> screen.</simpara>
</listitem>
<listitem>
<simpara>Log into the <emphasis role="strong">Mobile Developer Console</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click on <literal>Create Mobile App</literal> button.</simpara>
</listitem>
<listitem>
<simpara>Enter a name for your Mobile App.</simpara>
</listitem>
<listitem>
<simpara>Click <literal>Create</literal> button.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="binding">
<title>Binding a Mobile App with the Identity Management Service</title>
<simpara>To use mobile services, you must represent your mobile app in <emphasis role="strong">Mobile Developer Console</emphasis>, and that app must be associated with the mobile service.
This association is called <emphasis role="strong">binding</emphasis> and it is necessary for your mobile app to use that service.</simpara>
<simpara>To bind a Mobile App with a mobile service:</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Launch Mobile Developer Console</simpara>
</listitem>
<listitem>
<simpara>Click on the Mobile App on the Overview screen</simpara>
</listitem>
<listitem>
<simpara>Navigate to <emphasis role="strong">Mobile Services</emphasis> tab.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="shared/images/mobile-clients-services-all-unbound.png"/>
</imageobject>
<textobject><phrase>mobile clients services all unbound</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>It is possible to bind a Mobile App with a mobile service in the OpenShift console, however such bindings are not valid for the purposes of this procedure.</simpara>
</note>
</listitem>
<listitem>
<simpara>Press <emphasis role="strong">Bind to App</emphasis> in the Identity Management</simpara>
</listitem>
<listitem>
<simpara>Fill out the binding parameters required by the Identity Management Service.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="shared/images/mobile-clients-services-idm-parameters.png"/>
</imageobject>
<textobject><phrase>mobile clients services idm parameters</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>Use <literal>Public</literal> when binding a Mobile App to a Identity Management. When binding mobile services to each other, use <literal>Bearer</literal>.</simpara>
</note>
</listitem>
</orderedlist>
<simpara>The Identity Management service will now be expandable, details about the service can be viewed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="shared/images/mobile-clients-services-all-idm-provisioned.png"/>
</imageobject>
<textobject><phrase>mobile clients services all idm provisioned</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="configuring">
<title>Configuring the Service</title>
<simpara>The following section will guide you through configuring the schema of the redirect url and web origin for a client in Red Hat Single Sign-On.
This is required to enable OpenID authentication.
For an explanation of these terms, see <link xl:href="https://www.keycloak.org/documentation.html">Keycloak Documentation</link>.</simpara>
<section xml:id="_configuring_red_hat_single_sign_on">
<title>Configuring Red Hat Single Sign-On</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Log into the Mobile Developer Console and navigate to the Mobile App screen.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">Mobile Services</emphasis> tab and if a spinning icon is displayed to the right of the Identity Management entry, wait for the binding process to complete.</simpara>
</listitem>
<listitem>
<simpara>If the <emphasis>Red Hat Single Sign-On Realm URL</emphasis> URL is not visible, expand the Identity Management Service by clicking the &gt; icon.</simpara>
</listitem>
<listitem>
<simpara>Click on the <emphasis role="strong">Red Hat Single Sign-On Realm URL</emphasis> link to open the Red Hat Single Sign-On Administration Console.</simpara>
</listitem>
<listitem>
<simpara>Log in to the Administration console (default admin/admin).</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Clients</emphasis> from the left navigation menu.</simpara>
</listitem>
<listitem>
<simpara>Select your client from the list of clients. The name of your client is derived from the name of the Mobile App, the name of the mobile development platform and the client type, for example <literal>myapp-android-public</literal>.</simpara>
</listitem>
<listitem>
<simpara>Add an additional entry to the <emphasis role="strong">Valid Redirect URIs</emphasis> input field.</simpara>
<informalexample>
<simpara>Set the additional value to <literal><link xl:href="http://localhost*">http://localhost*</link></literal>.</simpara>
</informalexample>
</listitem>
<listitem>
<simpara>Add an additional entry to <emphasis role="strong">Web Origins</emphasis>.</simpara>
<informalexample>
<simpara>Set the additional value to <literal><link xl:href="http://localhost*">http://localhost*</link></literal>.</simpara>
</informalexample>
</listitem>
<listitem>
<simpara>Save your changes.</simpara>
</listitem>
<listitem>
<simpara>Create a new user account as described in <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#create-new-user">Creating a New User</link>.</simpara>
</listitem>
<listitem>
<simpara>Create credentials for the new user as described in <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#user_credentials">User Credentials</link>.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_setting_up_your_local_development_environment">
<title>Setting Up your Local Development Environment</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara><link xl:href="getting-started-installing.xml">Set up Red Hat Mobile Developer Services on OpenShift</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="getting-started-configuring.xml">Created a Mobile App and a Mobile Service</link> (Identity Management)</simpara>
</listitem>
</itemizedlist>
<section xml:id="_supported_environments">
<title>Supported Environments</title>
<simpara>In order to perform local development, you will need to have set up a local development environment or IDE.
Mobile Developer Services supports mobile app development across iOS Native, Android Native, Cordova and Xamarin.</simpara>
<note>
<simpara>You can only use the AeroGear Xamarin SDK to create iOS and Android Apps.</simpara>
</note>
<informalexample>
<variablelist>
<varlistentry>
<term>Cordova</term>
<listitem>
<simpara>You need the following installed on your machine:</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; <link xl:href="https://nodejs.org/">Node.js</link> version 8.9.4 runtime and NPM</simpara>
</listitem>
<listitem>
<simpara>&#10003; <link xl:href="https://cordova.apache.org/docs/en/latest/guide/cli/#installing-the-cordova-cli">Cordova CLI</link> version 8.0.0</simpara>
</listitem>
<listitem>
<simpara>&#10003; <link xl:href="https://github.com/ionic-team/ionic">Ionic</link> version 4</simpara>
</listitem>
</itemizedlist>
<simpara>For information on how to set up a local Cordova development environment, see the <link xl:href="https://cordova.apache.org/#getstarted">Cordova documentation</link>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</informalexample>
</section>
<section xml:id="running">
<title>Running your First Mobile App</title>
<section xml:id="_cloning_the_showcase_app">
<title>Cloning the Showcase App</title>
<informalexample>
<variablelist>
<varlistentry>
<term>Ionic</term>
<listitem>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://github.com/aerogear/ionic-showcase.git
$ cd ionic-showcase
$ git checkout0.8.0</programlisting>
</listitem>
</varlistentry>
<varlistentry>
<term>Android</term>
<listitem>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://github.com/aerogear/android-showcase-template.git
$ cd android-showcase-template
$ git checkout0.8.0</programlisting>
</listitem>
</varlistentry>
<varlistentry>
<term>iOS</term>
<listitem>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://github.com/aerogear/ios-showcase-template.git
$ cd ios-showcase-template
$ git checkout0.8.0</programlisting>
</listitem>
</varlistentry>
<varlistentry>
<term>Xamarin</term>
<listitem>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://github.com/aerogear/xamarin-showcase-template.git
$ cd xamarin-showcase-template
$ git checkout0.8.0</programlisting>
</listitem>
</varlistentry>
</variablelist>
</informalexample>
</section>
</section>
</section>
<section xml:id="_downloading_the_mobile_services_configuration_file">
<title>Downloading the Mobile Services Configuration File</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open your Mobile App in Mobile Developer Console.</simpara>
</listitem>
<listitem>
<simpara>Copy the <literal>mobile-services.json</literal> configuration to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Save the contents of the clipboard to a new file called <literal>mobile-services.json</literal>.</simpara>
<note>
<simpara>The mobile-services.json file is the link between your provisioned services on OpenShift and the mobile app you are developing. This file provides all required configuration to initialise the various SDKs and get them hooked up/connected to the back-end services.</simpara>
</note>
</listitem>
<listitem>
<simpara>Follow the platform-specific instructions:</simpara>
</listitem>
</orderedlist>
<informalexample>
<variablelist>
<varlistentry>
<term>Cordova</term>
<listitem>
<simpara>Copy the content of mobile-services.json file and paste it to the following location in your application project to replace the value of <literal>config</literal></simpara>
<simpara><literal>src/mobile-services.js</literal></simpara>
<simpara>Move mobile-services.json to the following location in your application project:</simpara>
<simpara><literal>src/mobile-services.json</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</informalexample>
</section>
<section xml:id="_building_the_app">
<title>Building the app</title>

</section>
<section xml:id="_using_self_signed_certificates_in_mobile_apps">
<title>Using Self-Signed Certificates in Mobile Apps</title>
<note>
<simpara>Before you can run a mobile app and connect to Mobile Developer Services, you must configure self-signed certificates on the mobile device.</simpara>
</note>
<simpara>Throughout the development lifecycle of a mobile app, a common requirement is to integrate and connect with back-end services in a secure manner.
This is achieved using SSL/TLS.</simpara>
<simpara>However, in order for the client device to connect over SSL/TLS, it needs to trust the certificates used by the back-end services, which are signed by a certificate authority.
Most client devices have a list of well-known and trusted certificate authorities pre-installed and this allows the client devices to verify the certificates used by the back-end services.</simpara>
<simpara>A typical OpenShift development environment uses self-signed certificates that are not signed by any of the trusted certificate authorities.
In such an environment, the client devices cannot establish secure connections with the back-end services that are running on a local OpenShift cluster.</simpara>
<simpara>The suggested workaround is to manually extract the root certificate from the cluster, install it on the device, and make sure your application trusts the new certificate.</simpara>
<section xml:id="extracting-root-ca">
<title>1. Extracting the OpenShift Root Certificate Authority Cert</title>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Log into OpenShift as the admin user:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc login -u system:admin</programlisting>
</listitem>
<listitem>
<simpara>Run the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ oc get secret router-certs --template='{{index .data "tls.crt"}}' -n default  |  \
base64 --decode | sed -e '1,/^-----END RSA PRIVATE KEY-----$/ d'  &gt; /tmp/localcluster.crt</programlisting>
<simpara>The resulting file is located in the <literal>/tmp</literal> directory.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="installing-on-device">
<title>2. Installing the OpenShift Root Certificate Authority Cert on a Device</title>
<informalexample>
<variablelist>
<varlistentry>
<term>Android</term>
<listitem>
<simpara>To install the cert on an Android emulator:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://support.google.com/android/answer/2819522?hl=en">Set screen lock</link> on the mobile device to allow for the installation of the certificate.</simpara>
</listitem>
<listitem>
<simpara>Click on the <emphasis role="strong">certificate file</emphasis> and drag it onto the emulator. It should be copied to the <emphasis>Downloads</emphasis> folder on the device.</simpara>
</listitem>
<listitem>
<simpara>Install the certificate on your device:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>To choose a file, navigate to <emphasis>Settings &gt; Security &amp; location &gt; Advanced &gt; Encryption &amp; credentials &gt; Install from SD card</emphasis>. From here, navigate to the <emphasis>Downloads</emphasis> folder and you should see the certificate file.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the <literal>Downloads</literal> folder and choose the certificate file.
The Android system detects the certificate and lets you install it. For more information, see the <link xl:href="https://support.google.com/nexus/answer/2844832?hl=en">sample guide for Google Nexus devices</link>.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>To install the cert on a real Android device:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://support.google.com/android/answer/2819522?hl=en">Enable screen lock</link> on the mobile device to allow for the installation of the certificate.</simpara>
</listitem>
<listitem>
<simpara>Copy the file to your device using one of the following methods:</simpara>
<itemizedlist>
<listitem>
<simpara>Email attachment (Recommended) - Email the certificate to an address accessible from the device and download the attachment.</simpara>
</listitem>
<listitem>
<simpara>Cloud service - Use a cloud storage service such as Dropbox or Google Drive that is accessible from the device, and download from the device.</simpara>
</listitem>
<listitem>
<simpara>USB - Attach the device to a computer and drag the certificate to a devices file system.</simpara>
<itemizedlist>
<listitem>
<simpara>Use the <link xl:href="https://support.google.com/nexus/answer/2840804?hl=en">example guide for Google Nexus devices</link>.
The procedure might be different for other devices.</simpara>
</listitem>
<listitem>
<simpara>Use the <link xl:href="https://developer.android.com/studio/command-line/adb">Android Debug Bridge (adb) documentation</link> for the push command to push the certificate to the connected device, for example:</simpara>
<screen>$ adb push /tmp/localcluster.crt /sdcard/Download/localcluster.crt</screen>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Install the certificate on your device:</simpara>
<simpara>If you are use the email or cloud service method, you are prompted by the Android system automatically to install the file.
Follow the instructions to complete the process.</simpara>
<simpara>If you are using the USB approach, you must install the certificate manually:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Go to Settings &gt; Security &amp; location &gt; Advanced &gt; Encryption &amp; credentials &gt; Install from SD card.
You are prompted to choose a file.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the <literal>Downloads</literal> folder and choose the certificate file.
The Android system detects the certificate and lets you install it. For more information, see the <link xl:href="https://support.google.com/nexus/answer/2844832?hl=en">sample guide for Google Nexus devices</link>.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>To verify the self-signed certificate is installed correctly, use a browser on the device to open the OpenShift web console. You should not see any warnings or errors relating to the certificate.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>iOS</term>
<listitem>
<simpara>To install the cert on an iOS  simulator:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Drag and drop the certificate file to the simulator, and use Safari to download the certificate to the simulator.</simpara>
</listitem>
<listitem>
<simpara>Install the downloaded certificate:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Go to Settings &gt; General &gt; Profile.
You should see a profile with a name similar to <literal>openshift-signer@xxxxxxx</literal>.</simpara>
</listitem>
<listitem>
<simpara>Tap on the profile.
An <emphasis role="strong">Install</emphasis> button appears in the top right corner of the screen.</simpara>
</listitem>
<listitem>
<simpara>Tap the <emphasis role="strong">Install</emphasis> button to install the cert.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Trust the installed certificate in iOS.
Go to Settings &gt; General &gt; About &gt; Certificate Trust Settings, and enable the newly installed root certificate.
See the <link xl:href="https://support.apple.com/en-us/HT204477">Apple support site</link> for more instructions.</simpara>
</listitem>
</orderedlist>
<simpara>To install the cert on a real iOS device:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Enable <link xl:href="https://support.apple.com/en-us/ht204060">Passcode</link> or <link xl:href="https://support.apple.com/en-us/ht201371">TouchID</link> protection on the mobile device to ensure the certificate can be installed.</simpara>
</listitem>
<listitem>
<simpara>Copy the file to your device using one of the following methods:</simpara>
<itemizedlist>
<listitem>
<simpara>Email attachment (Recommended) - Email the certificate to an address accessible from the device and download the attachment.</simpara>
</listitem>
<listitem>
<simpara>Cloud service - Use a cloud storage service such as Dropbox or Google Drive that is accessible from the device, and download from the device.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Add the certificate to your device:</simpara>
<simpara>When you download the certificate, the device should automatically detect a profile. Follow the on screen instructions to complete the process.</simpara>
</listitem>
<listitem>
<simpara>Trust the installed certificate in iOS.
Go to Settings &gt; General &gt; About &gt; Certificate Trust Settings, and enable the newly installed root certificate.
See the <link xl:href="https://support.apple.com/en-us/HT204477">Apple support site</link> for more instructions.</simpara>
</listitem>
</orderedlist>
<simpara>To verify the self-signed certificate is installed correctly, use a browser on the deveice to open the OpenShift web console. You should not see any warnings or errors about the certificate.</simpara>
</listitem>
</varlistentry>
</variablelist>
</informalexample>
</section>
<section xml:id="trust-self-signed-cert">
<title>3. Trusting the Certificate In Your App.</title>
<simpara>In the previous procedures, you ensured that the operating system trusts the cert.
However, if you are using newer versions of the Android or iOS operating systems, you also need to update your mobile app to make sure it trusts the certificate.</simpara>
<informalexample>
<variablelist>
<varlistentry>
<term>Android</term>
<listitem>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a <literal>network_security_config.xml</literal> file with the following code.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;network-security-config&gt;
  &lt;base-config&gt;
    &lt;trust-anchors&gt;
      &lt;certificates src="user"/&gt;
      &lt;certificates src="system"/&gt;
    &lt;/trust-anchors&gt;
  &lt;/base-config&gt;
&lt;/network-security-config&gt;</programlisting>
<simpara>Save this file in the following location:
* the root directory of the project for JavaScript apps</simpara>
</listitem>
<listitem>
<simpara>Update the manifest file of your Android application to use this configuration.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>If you are developing a Cordova application, add the following code the <literal>config.xml</literal> file in for the <literal>android</literal> platform:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;resource-file src="network_security_config.xml" target="app/src/main/res/xml/network_security_config.xml" /&gt;
&lt;edit-config file="app/src/main/AndroidManifest.xml" mode="merge" target="/manifest/application"&gt;
    &lt;application android:networkSecurityConfig="@xml/network_security_config" /&gt;
&lt;/edit-config&gt;</programlisting>
<simpara>You also need to add <literal>xmlns:android="http://schemas.android.com/apk/res/android"</literal> to the <literal>widget</literal> tag in the same <literal>config.xml</literal> file.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>For more information, check the <link xl:href="https://developer.android.com/training/articles/security-config">Android network security configuration guide</link>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>iOS</term>
<listitem>
<orderedlist numeration="arabic">
<listitem>
<simpara>Add the <literal>NSAllowsArbitraryLoads</literal> key to the <literal>Info.plist</literal> file of your iOS project.</simpara>
</listitem>
<listitem>
<simpara>Set the <literal>NSAllowsArbitraryLoads</literal> key to <literal>Yes</literal> to disable the App Transport Security (ATS) feature for your application.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>Only perform these steps for development or debug purposes, the resulting app will not pass the App Store review process.</simpara>
</note>
<simpara>For more information, see the <link xl:href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW60">Apple developer docs</link>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</informalexample>
</section>
</section>
<section xml:id="running-emulator">
<title>Running the app in an emulator</title>
<informalexample>
<variablelist>
<varlistentry>
<term>Cordova</term>
<listitem>
<simpara>Install dependencies:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>npm install -g cordova@8 ionic@4</literal></simpara>
</listitem>
<listitem>
<simpara><literal>npm install</literal></simpara>
</listitem>
</orderedlist>
<simpara>Cordova cross-platform applications can be run in the following emulators:</simpara>
<itemizedlist>
<listitem>
<simpara>Android: <literal>npm run ionic:android</literal></simpara>
</listitem>
<listitem>
<simpara>iOS: <literal>npm run ionic:ios</literal></simpara>
<note>
<simpara>A running emulator on macOS is required to run an iOS application.</simpara>
</note>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</informalexample>
</section>
</article>