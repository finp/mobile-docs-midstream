<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en" xml:id="a-collection-of-modules">
<info>
<title>Using the Identity Management Mobile Service</title>
<date>2019-08-12</date>
</info>
<simpara xml:id="introduction">The Identity Management service allows you to add authentication and authorization to your mobile app.</simpara>
<itemizedlist>
<listitem>
<simpara>Secure your mobile app using the industry standard OpenID Connect protocol</simpara>
</listitem>
<listitem>
<simpara>Add access control to your app based on user’s group membership</simpara>
</listitem>
<listitem>
<simpara>Easily implement SSO, multi-factor authentication and Social Login support</simpara>
</listitem>
<listitem>
<simpara>Back-end support for identity brokering and user federation</simpara>
</listitem>
</itemizedlist>
<section xml:id="reference-material-idm">
<title>Identity Management Service terminology</title>
<simpara>This section describes terminology that is associated with Identity Management.</simpara>
<variablelist>
<title>Identity Management Terminology</title>
<varlistentry>
<term>SSO</term>
<listitem>
<simpara>Single Sign On, the ability to share a login between multiple services</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>OpenID Connect</term>
<listitem>
<simpara>A standard for providing identity on top of OAuth 2.0</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Keycloak</term>
<listitem>
<simpara>Red Hat’s implementation of SSO and OpenID used as the identity provider</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Client ID</term>
<listitem>
<simpara>Is the client identifier for OpenID Connect requests, a simple alpha-numeric string</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>User Attributes</term>
<listitem>
<simpara>Additional properties for user accounts (besides name and email) managed by Keycloak</simpara>
</listitem>
</varlistentry>
</variablelist>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have provisioned Mobile Developer Console as described in <link xl:href="getting-started.html">Provisioning Mobile Developer Console</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="setting-up-the-idm-service">
<title>Setting Up the Identity Management Service</title>
<section xml:id="binding-an-app-to-idm">
<title>Binding a Mobile App with the Identity Management Service</title>
<simpara>To use mobile services, you must represent your mobile app in <emphasis role="strong">Mobile Developer Console</emphasis>, and that app must be associated with the mobile service.
This association is called <emphasis role="strong">binding</emphasis> and it is necessary for your mobile app to use that service.</simpara>
<simpara>This section describes how to set up the Identity Management service.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created a Mobile App.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>To bind a Mobile App with a mobile service:</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Launch Mobile Developer Console.</simpara>
</listitem>
<listitem>
<simpara>Click on the Mobile App on the Overview screen.</simpara>
</listitem>
<listitem>
<simpara>Navigate to <emphasis role="strong">Mobile Services</emphasis> tab.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="shared/images/mobile-clients-services-all-unbound.png"/>
</imageobject>
<textobject><phrase>mobile clients services all unbound</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>It is possible to bind a Mobile App with a mobile service in the OpenShift console, however such bindings are not valid for the purposes of this procedure.</simpara>
</note>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Bind to App</emphasis> for Identity Management.</simpara>
</listitem>
<listitem>
<simpara>Fill out the binding parameters required by the Identity Management Service.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="shared/images/mobile-clients-services-idm-parameters.png"/>
</imageobject>
<textobject><phrase>mobile clients services idm parameters</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>Use <literal>Public</literal> when binding a Mobile App to a Identity Management. When binding mobile services to each other, use <literal>Bearer</literal>.</simpara>
</note>
</listitem>
</orderedlist>
<simpara>The Identity Management service will now be expandable, details about the service can be viewed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="shared/images/mobile-clients-services-all-idm-provisioned.png"/>
</imageobject>
<textobject><phrase>mobile clients services all idm provisioned</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="configuring-idm">
<title>Configuring the Identity Management Service</title>
<simpara>This section guides you through configuring the redirect url and web origin for a client in Red Hat Single Sign-On.
This is required to enable OpenID authentication.
For an explanation of these terms, see <link xl:href="https://access.redhat.com/products/red-hat-single-sign-on">Red Hat Single Sign-On Documentation</link>.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An understanding of <link xl:href="https://openid.net/">OpenID</link></simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Log into the Mobile Developer Console and navigate to the Mobile App screen.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">Mobile Services</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>If a binding to the Identity Management service is in progress, a spinning icon is displayed to the right of the Identity Management entry. Wait for the binding process to complete.</simpara>
</listitem>
<listitem>
<simpara>If the <emphasis>Red Hat Single Sign-On Realm URL</emphasis> URL is not visible, expand the Identity Management Service by clicking the &gt; icon.</simpara>
</listitem>
<listitem>
<simpara>Click on the <emphasis role="strong">Red Hat Single Sign-On Realm URL</emphasis> link to open the Red Hat Single Sign-On Administration Console.</simpara>
</listitem>
<listitem>
<simpara>Log in to the Administration console (default admin/admin).</simpara>
</listitem>
<listitem>
<simpara>Select <literal>Clients</literal> from the left navigation menu.</simpara>
</listitem>
<listitem>
<simpara>Select your client from the list of clients. The name of your client is derived from the name of the Mobile App, the name of the mobile development platform and the client type, for example <literal>myapp-android-public</literal>.</simpara>
</listitem>
<listitem>
<simpara>Add an additional entry to <emphasis role="strong">Valid Redirect URIs</emphasis>.</simpara>
<informalexample>
<simpara>Set the additional value to <literal><link xl:href="http://localhost*">http://localhost*</link></literal>.</simpara>
</informalexample>
</listitem>
<listitem>
<simpara>Add an additional entry to <emphasis role="strong">Web Origins</emphasis>.</simpara>
<informalexample>
<simpara>Set additional value to <literal><link xl:href="http://localhost*">http://localhost*</link></literal>.</simpara>
</informalexample>
</listitem>
<listitem>
<simpara>Save your changes.</simpara>
</listitem>
<listitem>
<simpara>Creating a new user account as described in <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#create-new-user">Creating a New User</link>.</simpara>
</listitem>
<listitem>
<simpara>Set up credentials for the new user as described in <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#user_credentials">User Credentials</link>.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_configuring_your_development_environment_for_the_identity_management_service">
<title>Configuring your development environment for the Identity Management Service</title>
<section xml:id="downloading-the-configuration-file-idm">
<title>Downloading the Configuration File</title>
<simpara>The <literal>mobile-services.json</literal> file provides the information for your mobile app to communicate with services.
After you change any configuration in the Mobile Developer Console, it is important to update that file in your IDE.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The configuration of your Mobile App in Mobile Developer Console is up-to-date.</simpara>
</listitem>
<listitem>
<simpara>You have set up your mobile app development environment.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open your Mobile App in Mobile Developer Console.</simpara>
</listitem>
<listitem>
<simpara>Copy the <literal>mobile-services.json</literal> configuration to your clipboard.</simpara>
</listitem>
<listitem>
<simpara>Save the contents of the clipboard to a new file called <literal>mobile-services.json</literal>.</simpara>
<note>
<simpara>The <literal>mobile-services.json</literal> file is the link between your provisioned services on OpenShift and the mobile app you are developing. This file provides all required configuration to initialise the various SDKs and get them hooked up/connected to the back-end services.</simpara>
</note>
</listitem>
<listitem>
<simpara>Move mobile-services.json to the following location in your application project:</simpara>
<informalexample>
<simpara><literal>src/mobile-services.json</literal></simpara>
</informalexample>
</listitem>
</orderedlist>
</section>
<section xml:id="setting-up-sdk-idm">
<title>Setting up the Identity Management Service SDK</title>
<simpara>This section helps you to set up the Identity Management service SDK in your App.
It describes how to set up and initialize the Identity Management service SDK.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your local <literal>mobile-services.json</literal> file is up-to-date.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Import the libraries.</simpara>
<informalexample>
<orderedlist numeration="arabic">
<listitem>
<simpara>Add the following code to <literal>index.html</literal> located in <literal>src/</literal> :</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;meta http-equiv="Content-Security-Policy" content="default-src * file: 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *; img-src 'self' data: content:;"&gt;</programlisting>
</listitem>
<listitem>
<simpara>Install the <link xl:href="https://www.npmjs.com/package/@aerogear/auth">AeroGear Auth</link> package from <link xl:href="https://www.npmjs.com/">NPM</link>:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ npm install @aerogear/auth</programlisting>
</listitem>
<listitem>
<simpara>Install cordova-plugin-inappbrowser:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cordova plugin add cordova-plugin-inappbrowser</programlisting>
<simpara>Use a JavaScript bundler, for example, <literal>browserify</literal> so that you can use node modules in Cordova. Red Hat recommends using the <literal>require</literal> statement rather than <literal>import</literal> for the the @aerogear/auth module as shown below:</simpara>
</listitem>
</orderedlist>
</informalexample>
</listitem>
<listitem>
<simpara>Initialize the SDK.</simpara>
<informalexample>
<orderedlist numeration="arabic">
<listitem>
<simpara>Import and initialize Auth.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const Auth = require('@aerogear/auth').Auth;
const authService = new Auth(app.config);
const initOptions = { onLoad: "login-required" };

authService.init(initOptions)
    .then(() =&gt; {
        // successful init &amp; authentication
    })
    .catch((err) =&gt; {
        // initialization error
    });</programlisting>
</listitem>
</orderedlist>
<simpara>You can pass <literal>login-required</literal> or <literal>check-sso</literal> to the init function. <literal>login-required</literal> will authenticate the client if the user is logged in to Keycloak or display the login page if not. <literal>check-sso</literal> will only authenticate the client if the user is already logged in. If the user is not logged in the browser will be redirected back to the application and remain unauthenticated. By default, the <literal>check-sso</literal> option is used.</simpara>
<note>
<simpara>Initialization also enables authentication.</simpara>
</note>
</informalexample>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="adding-user-authentication-to-your-mobile-app">
<title>Adding User Authentication to your Mobile App</title>
<section xml:id="implementing-authentication-idm">
<title>Implementing authentication</title>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The <literal>mobile-services.json</literal> file is up-to-date in your development environment.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>To implement authentication using the Aerogear SDK:</para>
</formalpara>
<informalexample>
<simpara>Authentication is enabled during initialization as described in the section <xref linkend="setting-up-sdk-idm"/>. To manually redirect to the login screen, use:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">authService.login().then(() =&gt; {
    // Login success
}).catch(() =&gt; {
    // Login error
});;</programlisting>
</informalexample>
</section>
<section xml:id="refreshing-the-authentication-token-idm">
<title>Refreshing the authentication token</title>
<simpara>When a user is authenticated, an access token and a refresh token are generated by the authentication server.
See the <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#timeouts">Red Hat Single Sign-On documentation</link> for information about configuring the lifespan of these tokens.
If the refresh token is still valid, the authentication token can be refreshed even if the authentication token has expired.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A working mobile app that uses authentication with the Identity Management service.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>To automatically refresh the authenticate token :</para>
</formalpara>
<informalexample>
<simpara>Retrieve the keycloak adapter object and refresh the access token, when possible and required:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">authService.extract().updateToken(30).then(() =&gt; {
    // Token has been refreshed
});</programlisting>
<simpara>More information about the keycloak javascript adapter can be found <link xl:href="https://www.keycloak.org/docs/3.0/securing_apps/topics/oidc/javascript-adapter.html">here</link></simpara>
</informalexample>
</section>
<section xml:id="adding-log-out-option-idm">
<title>Adding Log Out Option to your Mobile App</title>
<simpara>The following section describes how to perform a logout.</simpara>
<note>
<simpara>To perform <emphasis role="strong">backchannel or federated logouts</emphasis>, you must enable the Backchannel Logout option for the federated identity provider.
More information is available in the Red Hat Single Sign-On documentation under <link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#openid_connect_v1_0_identity_providers">OICD Identity Providers</link>.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A working mobile app that uses authentication with the Identity Management service.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>To enable users of the mobile app log out from the service.</para>
</formalpara>
<informalexample>
<simpara>Invoke the <literal>logout</literal> function:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">authService.logout().then(() =&gt; {
    // User Logged Out Successfully and local Auth tokens were Deleted
});</programlisting>
</informalexample>
</section>
<section xml:id="authenticating-with-a-back-end-service-idm">
<title>Authenticating with a back end service</title>
<simpara>In a typical scenario, you not only want the user to authenticate on the mobile app, you also want that user to authenticate with a back end service.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A working mobile app that uses authentication with the Identity Management service.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add an additional token:</simpara>
<screen linenumbering="unnumbered">Authorization: BEARER Yourtoken</screen>
</listitem>
<listitem>
<simpara>Add code to authenticate with a back end service:</simpara>
<informalexample>
<simpara>The AeroGear Cordova SDK doesn&#8217;t provide an HTTP layer, therefore it cannot provide an Auth Header Provider.
You must manually attach the <literal>Bearer</literal> header to your HTTP requests.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">req.setRequestHeader('Accept', 'application/json');
req.setRequestHeader('Authorization', 'Bearer ' + authService.extract().token);</programlisting>

</informalexample>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xl:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html-single/server_administration_guide/#openid_connect_v1_0_identity_providers">Red Hat Single Sign-On OICD Providers</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="adding-access-control">
<title>Adding Access Control to your Mobile App</title>
<simpara>Once a <literal>UserPrincipal</literal> has been retrieved, the <link xl:href="http://www.keycloak.org/docs/latest/server_admin/index.html#roles">roles</link> of the user can be listed and checked.
This can be used to perform client side access control, such as hiding UI components related to actions the user doesn&#8217;t have permissions to perform.
Roles are divided into two types. Resource roles which belong to the client the user has authenticated against, and Realm roles which belong to the realm the client is in.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A working mobile app that uses authentication with the Identity Management service.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>To add Access Control:</para>
</formalpara>
<informalexample>
<simpara>Get the realm roles from the auth service:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const realmRoles = authService.getRealmRoles();</programlisting>
<note>
<simpara>No function to retrieve the resource roles is currently exported but you can use <literal>extract</literal> to get a handle to the underlying keycloak-js instance to retrieve the roles from there. Have a look at their documentation <link xl:href="https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter">here</link>.</simpara>
</note>
</informalexample>
</section>
</section>
<section xml:id="adding-sso-to-your-mobile-app">
<title>Adding SSO to your Mobile App</title>
<section xml:id="using-sso-idm">
<title>Using SSO with the Device Browser</title>
<simpara>The Red Hat mobile SDK uses OpenID Connect <link xl:href="http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth">Authorization Code Flow</link> to implement SSO using a mobile device browser.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have completed all steps in <link linkend="adding-access-control">Adding Access Control to your Mobile App</link>.</simpara>
</listitem>
<listitem>
<simpara>Two Mobile Apps bound to the Identity Management service.</simpara>
</listitem>
<listitem>
<simpara>Two Mobile Apps built and running on the same device that are using the AeroGear SDK Auth module.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>In the following procedure, the two apps are named <emphasis role="strong">Email App</emphasis> and <emphasis role="strong">Messaging App</emphasis>.
Substitute the appropriate names for your SSO scenario.</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Ensure the "Remember Me" option in Red Hat Single Sign-On is turned on. In the admin UI click on <emphasis role="strong">Realm Settings</emphasis> section on the left hand side, and then click on <emphasis role="strong">Login</emphasis>. Turn on <emphasis role="strong">Remember Me</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Now that your two apps and Red Hat Single Sign-On clients are setup, sign into the <emphasis role="strong">Email App</emphasis> with the user you have previously created. You should be redirected to your device browser which should have loaded the Red Hat Single Sign-On login page.</simpara>
</listitem>
<listitem>
<simpara>Next, enter in your credentials, make sure check the <emphasis role="strong">Remember Me</emphasis> option and login. You have now been authenticated on the <emphasis role="strong">Email App</emphasis> via the browser.</simpara>
</listitem>
<listitem>
<simpara>Finally, try sign into the <emphasis role="strong">Messaging App</emphasis> and you should be automatically logged in as you have been previously authenticated in the <emphasis role="strong">Email App</emphasis> via the <emphasis role="strong"><emphasis>same</emphasis></emphasis> browser.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Additional resources</title>
<para>With iOS 11 and later, Apple has introduced SFAuthenticationSession for apps to perform SSO, instead of using the system Safari browser and there are known issues with this new feature.
Sometimes, the user may have to enter their credentials again, even if they have logged in previously in another app.</para>
</formalpara>
</section>
</section>
<section xml:id="_additional_resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara>For more information about OpenID, see the <link xl:href="https://openid.net/">OpenID Foundation</link> website.</simpara>
</listitem>
<listitem>
<simpara>See the <link xl:href="https://www.keycloak.org/documentation.html">Red Hat Single Sign-On documentation</link> for more info.</simpara>
</listitem>
</itemizedlist>
</section>
</article>